# Get the html nodes containing track htmls
results <- read_html(album_html) %>%
html_nodes("a") %>%
html_attr("href") %>%
str_extract(regex_search)
results[!is.na(results)]
}
# Take a RapGenius song parsed html and extract the lyrics from the page
# The output is split by line as it appears on the original webpage
# Also, convert the list (which only contains one element) to a vector
get_lyrics <- function(html) {
html_node(html, "lyrics") %>%
html_text(trim = T) %>%
str_split("\n") %>%
unlist()
}
# Take RapGenius lyrics and remove lines surrounded by brackets since
# these represent production information, artist information, and other
# metadata that should not be used in the sentiment analysis
remove_brackets <- function(text) {
indexes <- sapply(1:length(text),
function(x) is.na(str_match(text[x], "\\[|\\]")))
text[indexes]
}
# Take RapGenius lyrics and remove blank lines
remove_blanks <- function(text) {
indexes <- sapply(1:length(text),
function(x) str_length(text[x]) > 0)
text[indexes]
}
# Take a vector of htmls for a given album on RapGenius and get all the lyrics
# The resulting character vector contains the entire album's lyrics as well
# as a marker (e.g., "1marker", "2marker") inserted to help record
# the track breaks
process_rg_album <- function(htmls) {
album <- vector(mode = "character", length = 0)
for (i in 1:length(htmls)) {
song <- read_html(htmls[i]) %>%
get_lyrics() %>%
remove_brackets() %>%
remove_blanks()
album <- c(album, paste0(i, "marker"), song)
}
return(album)
}
# This function modified from Julia Silge
# Take text and process the sentiment using a given method
process_sentiment <- function(rawtext, mymethod) {
chunkedtext <- data_frame(x = rawtext) %>%
group_by(linenumber = ceiling(row_number() / 10)) %>%
summarize(text = str_c(x, collapse = " "))
mySentiment <-
data.frame(cbind(linenumber = chunkedtext$linenumber,
sentiment = get_sentiment(chunkedtext$text,
method = mymethod)))
}
# This function modified from Julia Silge
# Chunk the text
chunk_text <- function(rawtext) {
chunkedtext <- data_frame(x = rawtext) %>%
group_by(linenumber = ceiling(row_number() / 10)) %>%
summarize(text = str_c(x, collapse = " "))
}
# Take a chunked text (after process_rg_album and chunk_text)
# and a vector of album htmls and return the chunked text vector elements
# that contain a track break
get_track_splits <- function(chunkedtext, album_htmls) {
indexes <- numeric(length = 0)
for (i in 1:length(album_htmls)) {
regex_search <- paste0("( ", i, "marker|^", i, "marker)( |$)")
index <- str_locate(chunkedtext$text, regex_search)[, 1] > 0
index <- which(index)
indexes <- c(indexes, index)
}
return(indexes)
}
# Take a vector of tracksplits and find where labels should go on the
# sentiment plot
# Subtracting 0.5 from every tracksplit value is necessary because vertical
# lines on the sentiment plot delineating tracks are also adjusted back by
# 0.5 so that vertical lines do not fall in the middle of the histogram bars
# but before them
find_middle <- function(tracksplits, chunkedtext) {
x <- c(tracksplits, length(chunkedtext$text))
x <- x - 0.5
result <- numeric(0)
for (i in 2:length(x)) {
mean <- mean(x[(i-1):i])
result <- c(result, mean)
}
return(result)
}
# This function modified from Julia Silge
# Plot the text sentiment
plot_sentiment <- function(mySentiment, myAnnotate, mySplits, myImage) {
mySplits <- mySplits - 0.5
color.vec <- ifelse(mySentiment$sentiment >= 0,
"forestgreen", "firebrick3")
g <- ggplot(data = mySentiment, aes(x = linenumber, y = sentiment)) +
labs(y = "Sentiment", size = 2) +
geom_bar(stat = "identity", fill = color.vec) +
geom_vline(xintercept = mySplits[2:length(mySplits)],
linetype = "dotted", size = 0.5) +
geom_label(data = myAnnotate, aes(x, y, label=label),
label.size = 0, size = 4, color="#2b2b2b",
inherit.aes = FALSE) +
# geom_segment(data = myAnnotate, aes(x = x, y = y1, xend = x, yend = y2),
# arrow = arrow(length = unit(0.04, "npc")),
# inherit.aes = FALSE) +
theme_minimal() +
scale_x_discrete(expand=c(0.02,0)) +
coord_cartesian(ylim = c(-12, 12)) +
#theme(plot.caption=element_text(size=8)) +
theme(axis.text.y=element_text(margin=margin(r=-10))) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank()) +
annotation_raster(myImage,
xmin = 0, xmax = length(mySentiment$sentiment)/10,
ymin = -13, ymax = -8)
}
yeezus.htmls <- get_track_htmls("http://genius.com/albums/Kanye-west/Yeezus",
"Kanye")
yeezus.htmls <- yeezus.htmls[1:10]
yeezus.htmls
yeezus.album <- process_rg_album(yeezus.htmls)
yeezus.chunked <- chunk_text(yeezus.album)
yeezus.tracksplits <- get_track_splits(yeezus.chunked, yeezus.htmls)
yeezus.sentiment <- process_sentiment(yeezus.album, "bing")
yeezus.anno <- data.frame(x = find_middle(yeezus.tracksplits, yeezus.chunked),
y = rep(c(11, 9), 20)[1:length(yeezus.tracksplits)],
label = c("On Sight", "Black Skinhead",
"I Am A God", "New Slaves",
"Hold My Liquor", "I'm In It",
"Blood On The Leaves", "Guilt Trip",
"Send It Up", "Bound 2"))
yeezus.image <- readPNG("images//yeezus.png")
p.yeezus <-
plot_sentiment(yeezus.sentiment, yeezus.anno,
yeezus.tracksplits, yeezus.image)
p.yeezus + labs(title =
expression(paste("Sentiment in ", italic("Yeezus"))))
mbdtf.htmls <-
get_track_htmls(
"http://genius.com/albums/Kanye-west/My-beautiful-dark-twisted-fantasy",
"Kanye")
mbdtf.htmls <- mbdtf.htmls[1:14]
mbdtf.htmls
get_lyrics(mbdtf.htmls)
read_html(mbdtf.htmls[1])
read_html(mbdtf.htmls[1]) %>% get_lyrics()
read_html(mbdtf.htmls[1]) %>% get_lyrics() %>% remove_brackets()
read_html(mbdtf.htmls[1]) %>% get_lyrics() %>% remove_brackets() %>% remove_blanks()
mbdtf.htmls <-
get_track_htmls(
"http://genius.com/albums/Kanye-west/My-beautiful-dark-twisted-fantasy",
"Kanye")
mbdtf.htmls
mbdtf.htmls <- mbdtf.htmls[c(1:3,5:14]
mbdtf.htmls <- mbdtf.htmls[c(1:3,5:14)]
mbdtf.htmls
mbdtf.htmls
mbdtf.album <- process_rg_album(mbdtf.htmls)
mbdtf.chunked <- chunk_text(mbdtf.album)
mbdtf.tracksplits <- get_track_splits(mbdtf.chunked, mbdtf.htmls)
mbdtf.sentiment <- process_sentiment(mbdtf.album, "bing")
mbdtf.anno <- data.frame(x = find_middle(mbdtf.tracksplits, mbdtf.chunked),
y = rep(c(11, 9), 20)[1:length(mbdtf.tracksplits)],
label = c("Dark Fantasy", "Gorgeous", "Power",
"All Of The Lights", "Monster",
"So Appalled", "Devil In A New Dress",
"Runaway", "Hell Of A Life", "Blame Game",
"Lost In The World", "Who Will...",
"See Me Now"))
mbdtf.image <- readPNG("images//808s.png")
p.mbdtf <-
plot_sentiment(mbdtf.sentiment, mbdtf.anno, mbdtf.tracksplits, mbdtf.image)
p.mbdtf + labs(title =
expression(paste("Sentiment in ",
italic("808s & Heartbreak"))))
mbdtf.image <- readPNG("images/mbdtf.png")
p.mbdtf <-
plot_sentiment(mbdtf.sentiment, mbdtf.anno, mbdtf.tracksplits, mbdtf.image)
p.mbdtf +
labs(title = expression(paste("Sentiment in ",
italic("My Beautiful Dark Twisted Fantasy"))))
acid.htmls <-
get_track_htmls("http://genius.com/albums/Chance-the-rapper/Acid-rap",
"Chance")
acid.htmls
acid.htmls <- acid.htmls[1:13]
acid.htmls
acid.album <- process_rg_album(acid.htmls)
acid.chunked <- chunk_text(acid.album)
acid.tracksplits <- get_track_splits(acid.chunked, acid.htmls)
acid.sentiment <- process_sentiment(acid.album, "bing")
acid.image <- readPNG("images/acid.png")
p.acid <-
plot_sentiment(acid.sentiment, acid.anno,
acid.tracksplits, acid.image)
acid.anno <- data.frame(x = find_middle(acid.tracksplits, acid.chunked),
y = rep(c(11, 9), 20)[1:length(acid.tracksplits)],
label = c("Good Ass Intro", "Pusha Man/Paranoia",
"Cocoa Butter Kisses", "JUICE", "Lost",
"Everybody's Something",
"Interlude (That's Love)", "Favorite Song",
"NaNa", "Smoke Again", "Acid Rain",
"Chain Smoker", "Everything's Good..."))
acid.image <- readPNG("images/acid.png")
p.acid <-
plot_sentiment(acid.sentiment, acid.anno,
acid.tracksplits, acid.image)
p.acid + labs(title =
expression(paste("Sentiment in ",
italic("The Life of Pablo"))))
library(dplyr)
library(rvest)
library(stringr)
library(syuzhet)
library(ggplot2)
library(png)
#==============================================================================
# Define functions used in downstream analysis
# Take a Genius album page html and scrub it to get track htmls
# The artist's name is used in a regex search to find the htmls
# Note that this function will likely return more than just the track htmls
# since the Genius tracklist will often include credits and other extra
# links
get_track_htmls <- function(album_html, artist_name) {
# Define the regex search to be used after the html is parsed
regex_search <- paste0("http://genius.com/", artist_name, "-(.*)")
# Get the html nodes containing track htmls
results <- read_html(album_html) %>%
html_nodes("a") %>%
html_attr("href") %>%
str_extract(regex_search)
results[!is.na(results)]
}
# Take a Genius song parsed html and extract the lyrics from the page
# The output is split by line as it appears on the original webpage
# Also, convert the list (which only contains one element) to a vector
get_lyrics <- function(html) {
html_node(html, "lyrics") %>%
html_text(trim = T) %>%
str_split("\n") %>%
unlist()
}
# Take Genius lyrics and remove lines surrounded by brackets since
# these represent production information, artist information, and other
# metadata that should not be used in the sentiment analysis
remove_brackets <- function(text) {
indexes <- sapply(1:length(text),
function(x) is.na(str_match(text[x], "\\[|\\]")))
text[indexes]
}
# Take Genius lyrics and remove blank lines
remove_blanks <- function(text) {
indexes <- sapply(1:length(text),
function(x) str_length(text[x]) > 0)
text[indexes]
}
# Take a vector of htmls for a given album on Genius and get all the lyrics
# The resulting character vector contains the entire album's lyrics as well
# as a marker (e.g., "1marker", "2marker") inserted to help record
# the track breaks
process_album <- function(htmls) {
album <- vector(mode = "character", length = 0)
for (i in 1:length(htmls)) {
song <- read_html(htmls[i]) %>%
get_lyrics() %>%
remove_brackets() %>%
remove_blanks()
album <- c(album, paste0(i, "marker"), song)
}
return(album)
}
# This function modified from Julia Silge
# Take text and process the sentiment using a given method
process_sentiment <- function(rawtext, mymethod) {
chunkedtext <- data_frame(x = rawtext) %>%
group_by(linenumber = ceiling(row_number() / 10)) %>%
summarize(text = str_c(x, collapse = " "))
mySentiment <-
data.frame(cbind(linenumber = chunkedtext$linenumber,
sentiment = get_sentiment(chunkedtext$text,
method = mymethod)))
}
# This function modified from Julia Silge
# Chunk the text
chunk_text <- function(rawtext) {
chunkedtext <- data_frame(x = rawtext) %>%
group_by(linenumber = ceiling(row_number() / 10)) %>%
summarize(text = str_c(x, collapse = " "))
}
# Take a chunked text (after process_album and chunk_text)
# and a vector of album htmls and return the chunked text vector elements
# that contain a track break
get_track_splits <- function(chunkedtext, album_htmls) {
indexes <- numeric(length = 0)
for (i in 1:length(album_htmls)) {
regex_search <- paste0("( ", i, "marker|^", i, "marker)( |$)")
index <- str_locate(chunkedtext$text, regex_search)[, 1] > 0
index <- which(index)
indexes <- c(indexes, index)
}
return(indexes)
}
# Take a vector of tracksplits and find where labels should go on the
# sentiment plot
# Subtracting 0.5 from every tracksplit value is necessary because vertical
# lines on the sentiment plot delineating tracks are also adjusted back by
# 0.5 so that vertical lines do not fall in the middle of the histogram bars
# but before them
find_middle <- function(tracksplits, chunkedtext) {
x <- c(tracksplits, length(chunkedtext$text))
x <- x - 0.5
result <- numeric(0)
for (i in 2:length(x)) {
mean <- mean(x[(i-1):i])
result <- c(result, mean)
}
return(result)
}
# This function modified from Julia Silge
# Plot the text sentiment
plot_sentiment <- function(mySentiment, myAnnotate, mySplits, myImage) {
mySplits <- mySplits - 0.5
color.vec <- ifelse(mySentiment$sentiment >= 0,
"forestgreen", "firebrick3")
g <- ggplot(data = mySentiment, aes(x = linenumber, y = sentiment)) +
labs(y = "Sentiment", size = 2) +
geom_bar(stat = "identity", fill = color.vec) +
geom_vline(xintercept = mySplits[2:length(mySplits)],
linetype = "dotted", size = 0.5) +
geom_label(data = myAnnotate, aes(x, y, label=label),
label.size = 0, size = 4, color="#2b2b2b",
inherit.aes = FALSE) +
# geom_segment(data = myAnnotate, aes(x = x, y = y1, xend = x, yend = y2),
# arrow = arrow(length = unit(0.04, "npc")),
# inherit.aes = FALSE) +
theme_minimal() +
scale_x_discrete(expand=c(0.02,0)) +
coord_cartesian(ylim = c(-12, 12)) +
#theme(plot.caption=element_text(size=8)) +
theme(axis.text.y=element_text(margin=margin(r=-10))) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank()) +
annotation_raster(myImage,
xmin = 0, xmax = length(mySentiment$sentiment)/10,
ymin = -13, ymax = -8)
}
cd.htmls <-
get_track_htmls("http://genius.com/albums/Kanye-west/The-college-dropout",
"Kanye")
cd.htmls <- cd.htmls[5:25]
cd.htmls
cd.album <- process_album(cd.htmls)
cd.chunked <- chunk_text(cd.album)
cd.tracksplits <- get_track_splits(cd.chunked, cd.htmls)
# Need this just because of the skits on this album
cd.tracksplits <- cd.tracksplits[2:21]
cd.sentiment <- process_sentiment(cd.album, "bing")
lr.htmls <-
get_track_htmls("http://genius.com/albums/Kanye-west/Late-registration",
"Kanye")
lr.htmls <- lr.htmls[1:23]
lr.htmls
lr.album <- process_album(lr.htmls)
lr.chunked <- chunk_text(lr.album)
lr.tracksplits <- get_track_splits(lr.chunked, lr.htmls)
lr.sentiment <- process_sentiment(lr.album, "bing")
grad.htmls <- get_track_htmls("http://genius.com/albums/Kanye-west/Graduation",
"Kanye")
grad.htmls <- grad.htmls[1:15]
grad.htmls
grad.album <- process_album(grad.htmls)
grad.chunked <- chunk_text(grad.album)
grad.tracksplits <- get_track_splits(grad.chunked, grad.htmls)
grad.sentiment <- process_sentiment(grad.album, "bing")
eight.htmls <-
get_track_htmls("http://genius.com/albums/Kanye-west/808s-heartbreak",
"Kanye")
eight.htmls <- eight.htmls[1:12]
eight.htmls
eight.album <- process_album(eight.htmls)
eight.chunked <- chunk_text(eight.album)
eight.tracksplits <- get_track_splits(eight.chunked, eight.htmls)
eight.sentiment <- process_sentiment(eight.album, "bing")
mbdtf.htmls <-
get_track_htmls(
"http://genius.com/albums/Kanye-west/My-beautiful-dark-twisted-fantasy",
"Kanye")
mbdtf.htmls <- mbdtf.htmls[c(1:3,5:14)]
mbdtf.htmls
mbdtf.album <- process_album(mbdtf.htmls)
mbdtf.chunked <- chunk_text(mbdtf.album)
mbdtf.tracksplits <- get_track_splits(mbdtf.chunked, mbdtf.htmls)
mbdtf.sentiment <- process_sentiment(mbdtf.album, "bing")
yeezus.htmls <- get_track_htmls("http://genius.com/albums/Kanye-west/Yeezus",
"Kanye")
yeezus.htmls <- yeezus.htmls[1:10]
yeezus.htmls
yeezus.album <- process_album(yeezus.htmls)
yeezus.chunked <- chunk_text(yeezus.album)
yeezus.tracksplits <- get_track_splits(yeezus.chunked, yeezus.htmls)
yeezus.sentiment <- process_sentiment(yeezus.album, "bing")
tlop.htmls <-
get_track_htmls("http://genius.com/albums/Kanye-west/The-life-of-pablo",
"Kanye")
tlop.htmls <- tlop.htmls[2:20]
tlop.htmls
tlop.album <- process_album(tlop.htmls)
tlop.chunked <- chunk_text(tlop.album)
tlop.tracksplits <- get_track_splits(tlop.chunked, tlop.htmls)
# Minor adjustment needed
tlop.tracksplits[7] <- 35
tlop.sentiment <- process_sentiment(tlop.album, "bing")
kanye.sentiments <- c(cd.sentiment, lr.sentiment, grad.sentiment,
eight.sentiment, mbdtf.sentiment, yeezus.sentiment,
tlop.sentiment)
kanye.sentiments
str(kanye.sentiments)
kanye.sentiments[[1]]
means <- sapply((1:7)*2, function(x) mean(kanye.sentiments[[x]]))
means
var()
var
?var
var(1, 2)
var(1:10)
var <- sapply((1:7)*2, function(x) var(kanye.sentiments[[x]])
)
var <- sapply((1:7)*2, function(x) var(kanye.sentiments[[x]]))
var
df.kanye <- cbind(kanye.titles, means, var)
kanye.titles <- c("The College Dropout", "Late Registration", "Graduation",
"808s & Heartbreak", "My Beautiful Dark Twisted Fantasy",
"Yeezus", "The Life of Pablo")
df.kanye <- cbind(kanye.titles, means, var)
str(df.kanye)
df.kanye <- as.dataframe(cbind(kanye.titles, means, var))
df.kanye <- as.data.frame(cbind(kanye.titles, means, var))
str(df.kanye)
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
?round()
df.kanye <- as.data.frame(cbind(kanye.titles,
round(means, digits = 2),
round(var, digits = 2))
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
df.kanye <- as.data.frame(cbind(kanye.titles,
round(means, digits = 2),
round(var, digits = 2)))
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
means
df.kanye <- as.data.frame(cbind(kanye.titles,
round(means, digits = 3),
round(var, digits = 3)))
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
df.kanye <- as.data.frame(cbind(kanye.titles,
round(means, digits = 2),
round(var, digits = 2)))
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
df.kanye$Sentiment Mean
df.kanye$"Sentiment Mean"
str(df.kanye)
means
str(means)
str(var)
?round
df.kanye <- as.data.frame(cbind(kanye.titles,
as.numeric(round(means, digits = 2)),
as.numeric(round(var, digits = 2))))
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
str(df.kanye)
df.kanye[, 2:3]
df.kanye[, 2:3] <- as.numeric(df.kanye[, 2:3])
df.kanye <- as.data.frame(cbind(kanye.titles,
round(means, digits = 2),
round(var, digits = 2)))
str(df.kanye)
df.kanye$V2 <- as.numeric(df.kanye$V2)
df.kanye
?as.data.frame
df.kanye <- data.frame(cbind(kanye.titles,
round(means, digits = 2),
round(var, digits = 2)))
df.kanye
str(df.kanye)
?data.frame
df.kanye <- data.frame(kanye.titles,
round(means, digits = 2),
round(var, digits = 2))
df.kanye
kanye.titles <- c("The College Dropout", "Late Registration", "Graduation",
"808s & Heartbreak", "My Beautiful Dark Twisted Fantasy",
"Yeezus", "The Life of Pablo")
kanye.sentiments <- c(cd.sentiment, lr.sentiment, grad.sentiment,
eight.sentiment, mbdtf.sentiment, yeezus.sentiment,
tlop.sentiment)
means <- sapply((1:7)*2, function(x) mean(kanye.sentiments[[x]]))
var <- sapply((1:7)*2, function(x) var(kanye.sentiments[[x]]))
df.kanye <- data.frame(kanye.titles, round(means, digits = 2),
round(var, digits = 2))
colnames(df.kanye) <- c("Album Title", "Sentiment Mean", "Sentiment Variance")
df.kanye
